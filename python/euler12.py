#!/usr/bin/env python
import collections
import heapq
import pdb

'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

#mydict = collections.defaultdict(int)
mydict = {}
#mylist = []

def find_div(n):
    divisors_up = []
    #divisors_down = []
    for i in xrange(1, n+1):
        #print divisors_up
        if i in divisors_up:
            #print "BREAK!!"
            break
        elif n % i == 0:
            #print "Adding to down: %s"%(n/i)
            heapq.heappush(divisors_up, n / i)
            #print "Adding to up: %s"%i
            heapq.heappush(divisors_up,i) 
    return len(divisors_up)

tri_num = 0
for i in xrange(1, 1000000):#have to start at 1 in order to compute the correct triangle number or
    tri_num += i            # have a function to compute the triangle
    mydict[i] =  (i, 0, 0)
    mydict[i] = (i, tri_num, find_div(tri_num))
    #print "i=%s:triangle=%s:divisors=%s"%(mydict[i][0], mydict[i][1], mydict[i][2])
    #print "\n"
    if mydict[i][2] > 500:
        print "i=%s:triangle=%s:divisors=%s"%(mydict[i][0], mydict[i][1], mydict[i][2])
        print mydict[i]
        break
    #if len(mydict) % 20 == 0:
        #print "i=%s:triangle=%s:divisors=%s"%(mydict[i][0], mydict[i][1], mydict[i][2])
        #mydict
        #break
    
